"""fishing

迁移 ID: b509501ca994
父迁移: cf061fbe3bba
创建时间: 2025-07-30 19:22:47.180385

"""
from __future__ import annotations

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa


revision: str = 'b509501ca994'
down_revision: str | Sequence[str] | None = 'cf061fbe3bba'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fishing_quality_meta',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('probability', sa.FLOAT(), nullable=False),
    sa.Column('price_per_length', sa.FLOAT(), nullable=False),
    sa.Column('length_range_start', sa.FLOAT(), nullable=False),
    sa.Column('length_range_end', sa.FLOAT(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fishing_quality_meta')),
    sa.UniqueConstraint('name', name='unique_quality_name'),
    info={'bind_key': 'fishing'}
    )
    op.create_table('fishing_user_meta',
    sa.Column('user_id', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_fishing_user_meta')),
    info={'bind_key': 'fishing'}
    )
    op.create_table('fish_meta',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('quality', sa.String(length=50), nullable=False),
    sa.ForeignKeyConstraint(['quality'], ['fishing_quality_meta.name'], name=op.f('fk_fish_meta_quality_fishing_quality_meta')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fish_meta')),
    sa.UniqueConstraint('name', name='uq_fish_meta_quality_name'),
    info={'bind_key': 'fishing'}
    )
    with op.batch_alter_table('fish_meta', schema=None) as batch_op:
        batch_op.create_index('idx_fish_meta_name', ['name'], unique=False)
        batch_op.create_index('idx_fish_meta_quality', ['quality'], unique=False)

    op.create_table('fish_record',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.String(length=50), nullable=False),
    sa.Column('fish_name', sa.String(length=50), nullable=False),
    sa.Column('length', sa.Integer(), nullable=False),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['fish_name'], ['fish_meta.name'], name=op.f('fk_fish_record_fish_name_fish_meta')),
    sa.ForeignKeyConstraint(['user_id'], ['fishing_user_meta.user_id'], name=op.f('fk_fish_record_user_id_fishing_user_meta')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fish_record')),
    info={'bind_key': 'fishing'}
    )
    with op.batch_alter_table('fish_record', schema=None) as batch_op:
        batch_op.create_index('idx_fish_fish_name', ['fish_name'], unique=False)
        batch_op.create_index('idx_fish_user_id', ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('fish_record', schema=None) as batch_op:
        batch_op.drop_index('idx_fish_user_id')
        batch_op.drop_index('idx_fish_fish_name')

    op.drop_table('fish_record')
    with op.batch_alter_table('fish_meta', schema=None) as batch_op:
        batch_op.drop_index('idx_fish_meta_quality')
        batch_op.drop_index('idx_fish_meta_name')

    op.drop_table('fish_meta')
    op.drop_table('fishing_user_meta')
    op.drop_table('fishing_quality_meta')
    # ### end Alembic commands ###
