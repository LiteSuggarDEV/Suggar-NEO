"""init

迁移 ID: 6566a1745877
父迁移:
创建时间: 2025-07-13 23:13:22.930518

"""

from __future__ import annotations

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

revision: str = "6566a1745877"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "currency_meta",
        sa.Column("id", sa.String(length=255), nullable=False),
        sa.Column("display_name", sa.String(length=255), nullable=False),
        sa.Column("symbol", sa.String(length=5), nullable=False),
        sa.Column("default_balance", sa.FLOAT(), nullable=False),
        sa.Column("allow_negative", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_currency_meta")),
        info={"bind_key": "nonebot_plugin_value"},
    )
    op.create_table(
        "group_blacklist",
        sa.Column("group_id", sa.String(length=50), nullable=False),
        sa.Column("reason", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("group_id", name=op.f("pk_group_blacklist")),
        info={"bind_key": ""},
    )
    op.create_table(
        "private_blacklist",
        sa.Column("user_id", sa.String(length=50), nullable=False),
        sa.Column("reason", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("user_id", name=op.f("pk_private_blacklist")),
        info={"bind_key": ""},
    )
    op.create_table(
        "suggar_user_data",
        sa.Column("user_id", sa.String(length=50), nullable=False),
        sa.Column("last_daily", sa.DateTime(), nullable=False),
        sa.Column("daily_count", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("user_id", name=op.f("pk_suggar_user_data")),
        info={"bind_key": ""},
    )
    op.create_table(
        "user_accounts",
        sa.Column("uni_id", sa.String(length=255), nullable=False),
        sa.Column("id", sa.String(length=255), nullable=False),
        sa.Column("currency_id", sa.String(length=255), nullable=False),
        sa.Column("balance", sa.FLOAT(), nullable=False),
        sa.Column("last_updated", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency_meta.id"],
            name=op.f("fk_user_accounts_currency_id_currency_meta"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uni_id", name=op.f("pk_user_accounts")),
        sa.UniqueConstraint("id", "currency_id", name="uq_usercurrency"),
        info={"bind_key": "nonebot_plugin_value"},
    )
    with op.batch_alter_table("user_accounts", schema=None) as batch_op:
        batch_op.create_index("idx_usercurrency", ["id", "currency_id"], unique=False)

    op.create_table(
        "transactions",
        sa.Column("id", sa.String(length=255), nullable=False),
        sa.Column("account_id", sa.String(length=255), nullable=False),
        sa.Column("currency_id", sa.String(length=255), nullable=False),
        sa.Column("amount", sa.FLOAT(), nullable=False),
        sa.Column("action", sa.String(length=20), nullable=False),
        sa.Column("source", sa.String(length=255), nullable=False),
        sa.Column("balance_before", sa.FLOAT(), nullable=False),
        sa.Column("balance_after", sa.FLOAT(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["user_accounts.id"],
            name=op.f("fk_transactions_account_id_user_accounts"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency_meta.id"],
            name=op.f("fk_transactions_currency_id_currency_meta"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_transactions")),
        info={"bind_key": "nonebot_plugin_value"},
    )
    with op.batch_alter_table("transactions", schema=None) as batch_op:
        batch_op.create_index("idx_transaction_account", ["account_id"], unique=False)
        batch_op.create_index("idx_transactiontimestamp", ["timestamp"], unique=False)

    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("transactions", schema=None) as batch_op:
        batch_op.drop_index("idx_transactiontimestamp")
        batch_op.drop_index("idx_transaction_account")

    op.drop_table("transactions")
    with op.batch_alter_table("user_accounts", schema=None) as batch_op:
        batch_op.drop_index("idx_usercurrency")

    op.drop_table("user_accounts")
    op.drop_table("suggar_user_data")
    op.drop_table("private_blacklist")
    op.drop_table("group_blacklist")
    op.drop_table("currency_meta")
    # ### end Alembic commands ###
